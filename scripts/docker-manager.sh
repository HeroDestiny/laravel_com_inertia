#!/bin/bash

# Script para gerenciar ambientes Docker do Laravel

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

function show_help() {
    echo "üê≥ Gerenciador Docker - Laravel com Inertia"
    echo ""
    echo "Uso: $0 <comando>"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  postgres     - Inicia PostgreSQL standalone (+ pgAdmin)"
    echo "  sail         - Inicia Laravel Sail (desenvolvimento completo)"
    echo "  production   - Build/deploy para produ√ß√£o"
    echo "  stop         - Para todos os containers"
    echo "  clean        - Remove volumes e containers √≥rf√£os"
    echo "  status       - Mostra status dos containers"
    echo ""
    echo "Exemplos:"
    echo "  $0 postgres    # Apenas banco PostgreSQL"
    echo "  $0 sail        # Ambiente completo de desenvolvimento"
    echo "  $0 stop        # Para tudo"
}

function start_postgres() {
    echo "üöÄ Iniciando PostgreSQL standalone..."
    cd "$PROJECT_ROOT"
    docker-compose -f docker/postgres/docker-compose.yml up -d
    echo ""
    echo "‚úÖ PostgreSQL iniciado!"
    echo "   üìä Banco: localhost:5432"
    echo "   üåê pgAdmin: http://localhost:8080"
    echo "      üìß Email: admin@laravel.com"
    echo "      üîë Senha: admin123"
}

function start_sail() {
    echo "üöÄ Iniciando Laravel Sail..."
    cd "$PROJECT_ROOT/src"
    
    if [ ! -f "vendor/bin/sail" ]; then
        echo "‚ö†Ô∏è  Laravel Sail n√£o encontrado. Instalando depend√™ncias..."
        composer install
    fi
    
    ./vendor/bin/sail up -d
    echo ""
    echo "‚úÖ Laravel Sail iniciado!"
    echo "   üåê App: http://localhost"
    echo "   ‚ö° Vite: http://localhost:5173"
    echo "   üìä PostgreSQL: localhost:5432"
}

function start_production() {
    echo "üöÄ Iniciando ambiente de produ√ß√£o..."
    cd "$PROJECT_ROOT"
    
    if [ ! -f ".env" ]; then
        echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado para produ√ß√£o!"
        echo "   Crie um .env com as vari√°veis de produ√ß√£o"
        exit 1
    fi
    
    docker-compose -f docker/production/docker-compose.yml up --build -d
    echo ""
    echo "‚úÖ Ambiente de produ√ß√£o iniciado!"
    echo "   üåê App: http://localhost"
}

function stop_all() {
    echo "üõë Parando todos os containers..."
    cd "$PROJECT_ROOT"
    
    # Para PostgreSQL standalone
    docker-compose -f docker/postgres/docker-compose.yml down 2>/dev/null || true
    
    # Para Laravel Sail
    cd src 2>/dev/null && ./vendor/bin/sail down 2>/dev/null || true
    
    # Para produ√ß√£o
    cd "$PROJECT_ROOT"
    docker-compose -f docker/production/docker-compose.yml down 2>/dev/null || true
    
    echo "‚úÖ Todos os containers parados!"
}

function clean_docker() {
    echo "üßπ Limpando containers e volumes √≥rf√£os..."
    docker container prune -f
    docker volume prune -f
    docker network prune -f
    echo "‚úÖ Limpeza conclu√≠da!"
}

function show_status() {
    echo "üìä Status dos containers Docker:"
    echo ""
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
}

# Comando principal
case "${1:-}" in
    postgres)
        start_postgres
        ;;
    sail)
        start_sail
        ;;
    production)
        start_production
        ;;
    stop)
        stop_all
        ;;
    clean)
        clean_docker
        ;;
    status)
        show_status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "‚ùå Comando inv√°lido: ${1:-}"
        echo ""
        show_help
        exit 1
        ;;
esac
