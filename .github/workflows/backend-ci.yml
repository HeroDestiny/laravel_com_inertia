name: 🐘 Backend CI Pipeline

on:
  push:
    paths:
      - 'src/**/*.php'
      - 'src/composer.json'
      - 'src/composer.lock'
      - 'src/phpunit.xml'
      - 'src/phpstan.neon'
      - 'src/.env.testing'
      - 'src/config/**'
      - 'src/database/**'
      - 'src/routes/**'
      - '.github/workflows/backend-ci.yml'
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    paths:
      - 'src/**/*.php'
      - 'src/composer.json'
      - 'src/composer.lock'
      - 'src/phpunit.xml'
      - 'src/phpstan.neon'
      - 'src/.env.testing'
      - 'src/config/**'
      - 'src/database/**'
      - 'src/routes/**'
      - '.github/workflows/backend-ci.yml'

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '22'
  WORKING_DIR: 'src'

jobs:
  # Job 1: Lint e Análises estáticas Backend
  lint-backend:
    name: 🔍 Backend Lint & Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        analysis: ['pint', 'phpstan']

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          coverage: none
          extensions: mbstring, xml, ctype, iconv, intl

      - name: 📦 Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-lint-${{ runner.os }}-php${{ env.PHP_VERSION }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-lint-${{ runner.os }}-php${{ env.PHP_VERSION }}-
            composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-

      - name: 📦 Install PHP dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-scripts --no-dev

      - name: 🎨 PHP Code Style (Pint)
        if: matrix.analysis == 'pint'
        working-directory: ${{ env.WORKING_DIR }}
        run: vendor/bin/pint --test

      - name: 🔍 Static Analysis (PHPStan)
        if: matrix.analysis == 'phpstan'
        working-directory: ${{ env.WORKING_DIR }}
        run: vendor/bin/phpstan analyse --memory-limit=1G --no-progress --error-format=github

  # Job 2: Testes Backend
  test-backend:
    name: 🧪 Backend Tests (PHP ${{ matrix.php-version }}, ${{ matrix.dependency-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: lint-backend
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.3']
        dependency-version: [prefer-stable]
        include:
          - php-version: '8.3'
            dependency-version: prefer-lowest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2, phpunit/phpunit
          coverage: xdebug
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite
          ini-values: memory_limit=512M

      - name: 🎯 Setup Node.js (for Ziggy)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-test-${{ runner.os }}-php${{ matrix.php-version }}-${{ matrix.dependency-version }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-test-${{ runner.os }}-php${{ matrix.php-version }}-${{ matrix.dependency-version }}-
            composer-test-${{ runner.os }}-php${{ matrix.php-version }}-
            composer-${{ runner.os }}-php${{ matrix.php-version }}-

      - name: 🗂️ Cache NPM
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('src/package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ "${{ matrix.dependency-version }}" = "prefer-lowest" ]; then
            composer update --no-interaction --prefer-dist --optimize-autoloader --prefer-lowest --prefer-stable
          else
            composer install --no-interaction --prefer-dist --optimize-autoloader
          fi
          npm ci

      - name: ⚙️ Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ ! -f ".env.testing" ]; then
            echo "❌ .env.testing file not found"
            exit 1
          fi
          cp .env.testing .env
          php artisan key:generate
          php artisan ziggy:generate

      - name: 🧪 Run Backend tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          XDEBUG_MODE: coverage
        run: |
          mkdir -p coverage
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage/clover.xml --log-junit=coverage/junit.xml --testdox

      - name: 📤 Upload Backend Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-php${{ matrix.php-version }}-${{ matrix.dependency-version }}-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/coverage/
          retention-days: 30
          if-no-files-found: warn

  # Job 3: Análise de cobertura e qualidade (SonarQube)
  sonarqube-backend:
    name: 📊 Backend SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-backend
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]')

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download Backend Coverage Reports
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: backend-coverage-php8.3-prefer-stable-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/coverage

      - name: 🔍 Prepare Coverage for SonarQube
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f "coverage/clover.xml" ]; then
            echo "✅ Using coverage data from test job"
            cp coverage/clover.xml coverage.xml
          else
            echo "⚠️ No coverage data found - SonarQube will analyze code without coverage metrics"
          fi

      - name: 📊 SonarQube Scan
        if: ${{ secrets.SONAR_TOKEN }}
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ${{ env.WORKING_DIR }}

      - name: ⚠️ SonarQube Skipped
        if: ${{ !secrets.SONAR_TOKEN }}
        run: |
          echo "⚠️ SonarQube analysis skipped (SONAR_TOKEN not configured)"
          echo "💡 To enable SonarQube scanning:"
          echo "   1. Sign up at https://sonarcloud.io"
          echo "   2. Create a new project and get your token"
          echo "   3. Add it as SONAR_TOKEN secret in GitHub repository settings"
          echo "   4. Your sonar-project.properties file is already configured!"

  # Job 4: Segurança Backend
  security-backend:
    name: 🛡️ Backend Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-backend

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          extensions: mbstring, xml, ctype, iconv, intl

      - name: 📦 Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-security-${{ runner.os }}-php${{ env.PHP_VERSION }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-lint-${{ runner.os }}-php${{ env.PHP_VERSION }}-
            composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-

      - name: 📦 Install PHP dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      - name: 🛡️ Security Audit (Composer)
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          echo "🔍 Running Composer security audit..."
          if composer audit; then
            echo "✅ No security vulnerabilities found in PHP dependencies"
          else
            echo "⚠️ Security vulnerabilities detected - please review and update dependencies"
          fi

  # Job 5: Documentação Backend
  documentation-backend:
    name: 📚 Backend Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: lint-backend
    if: contains(github.event.head_commit.message, '[docs]') || github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          extensions: mbstring, xml, ctype, iconv, intl

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 📦 Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-docs-${{ runner.os }}-php${{ env.PHP_VERSION }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-lint-${{ runner.os }}-php${{ env.PHP_VERSION }}-
            composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          pip install plantuml-markdown

      - name: ⚙️ Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan ziggy:generate

      - name: 📊 Generate UML Diagrams
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mkdir -p storage/uml
          if php artisan list | grep -q "generate:uml"; then
            php artisan generate:uml
          fi
          if [ -f "scripts/check_uml_system.py" ]; then
            python3 scripts/check_uml_system.py
          fi

      - name: 📤 Upload Backend Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-uml-diagrams-${{ github.sha }}
          path: |
            ${{ env.WORKING_DIR }}/storage/uml/*.puml
            ${{ env.WORKING_DIR }}/storage/uml/*.png
          retention-days: 30
          if-no-files-found: warn

  # Job 6: Relatório Final Backend
  backend-report:
    name: 📊 Backend Report
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [lint-backend, test-backend, sonarqube-backend, security-backend]
    if: always()

    steps:
      - name: 📋 Backend Pipeline Summary
        run: |
          echo "## 📋 Backend Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Static Analysis | ${{ needs.lint-backend.result }} | ⏱️ |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test-backend.result }} | ⏱️ |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube | ${{ needs.sonarqube-backend.result }} | ⏱️ |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-backend.result }} | ⏱️ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Verificar se os jobs críticos passaram
          critical_jobs=("lint-backend" "test-backend" "security-backend")
          failed_jobs=()
          
          if [[ "${{ needs.lint-backend.result }}" != "success" ]]; then
            failed_jobs+=("lint-backend")
          fi
          if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
            failed_jobs+=("test-backend")
          fi
          if [[ "${{ needs.security-backend.result }}" != "success" ]]; then
            failed_jobs+=("security-backend")
          fi
          
          if [ ${#failed_jobs[@]} -eq 0 ]; then
            echo "✅ **Backend pipeline passou em todos os testes críticos!**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Backend pipeline passou em todos os testes críticos!"
            exit 0
          else
            echo "❌ **Backend pipeline teve falhas nos jobs:** ${failed_jobs[*]}" >> $GITHUB_STEP_SUMMARY
            echo "❌ Backend pipeline teve falhas nos jobs: ${failed_jobs[*]}"
            exit 1
          fi
