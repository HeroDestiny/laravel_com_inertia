name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '22'
  WORKING_DIR: src

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      php-changes: ${{ steps.changes.outputs.php }}
      js-changes: ${{ steps.changes.outputs.js }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for speed

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            php:
              - 'src/**/*.php'
              - 'src/composer.{json,lock}'
            js:
              - 'src/**/*.{js,ts,vue}'
              - 'src/package*.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-scripts
          npm ci --prefer-offline --no-audit

      - name: PHP Quality Checks
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          vendor/bin/pint --test --preset=laravel
          vendor/bin/phpstan analyse --memory-limit=1G --no-progress --error-format=github
          vendor/bin/psalm --no-progress --output-format=github

      - name: Frontend Quality Checks
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run lint -- --max-warnings=0
          npm run type-check
          npm run format:check
          npm run format:check
  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - php-version: '8.3'
            dependency-version: prefer-stable
          - php-version: '8.3' 
            dependency-version: prefer-lowest
            experimental: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
          coverage: none
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite
          ini-values: memory_limit=512M

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-${{ runner.os }}-php${{ matrix.php-version }}-${{ matrix.dependency-version }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-php${{ matrix.php-version }}-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ "${{ matrix.dependency-version }}" = "prefer-lowest" ]; then
            composer update --no-interaction --prefer-dist --optimize-autoloader --prefer-lowest --prefer-stable --no-scripts
          else
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-scripts
          fi
          npm ci --prefer-offline --no-audit

      - name: Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp .env.testing .env
          php artisan key:generate --ansi
          php artisan config:cache
          php artisan ziggy:generate

      - name: Run tests
        working-directory: ${{ env.WORKING_DIR }}
        run: vendor/bin/phpunit --configuration phpunit-no-coverage.xml --stop-on-failure

      - name: Build assets
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: Frontend tests
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          if [ -f "vitest.config.ts" ]; then
            npx vitest run --reporter=verbose 2>/dev/null || true
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-scripts --no-dev
          npm ci --prefer-offline --no-audit

      - name: Security audits
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          echo "ÔøΩ Running security audits..."
          composer audit --format=plain || true
          npm audit --audit-level=moderate || true

      - name: Snyk scan
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            npx snyk test --severity-threshold=high
          else
            echo "‚ö†Ô∏è Snyk token not configured, skipping scan"
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          ini-values: memory_limit=256M

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev --no-scripts
          npm ci --prefer-offline

      - name: Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp .env.example .env
          php artisan key:generate --ansi
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan ziggy:generate

      - name: Build production assets
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: Build Docker image
        run: |
          docker build \
            --file docker/production/Dockerfile \
            --tag laravel-inertia:latest \
            --tag "laravel-inertia:${{ github.sha }}" \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            .

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [lint, test, security, deploy]
    if: always()

    steps:
      - name: Pipeline summary
        run: |
          echo "üöÄ Pipeline Results:"
          echo "‚îú‚îÄ‚îÄ Lint: ${{ needs.lint.result }}"
          echo "‚îú‚îÄ‚îÄ Test: ${{ needs.test.result }}"
          echo "‚îú‚îÄ‚îÄ Security: ${{ needs.security.result }}"
          echo "‚îî‚îÄ‚îÄ Deploy: ${{ needs.deploy.result }}"

      - name: Success notification
        if: needs.deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '‚úÖ Deploy completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Failure notification
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Pipeline failed! Check the logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
