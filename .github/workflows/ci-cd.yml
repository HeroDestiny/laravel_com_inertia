name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '22'
  WORKING_DIR: src

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      php-changes: ${{ steps.changes.outputs.php }}
      js-changes: ${{ steps.changes.outputs.js }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            php:
              - 'src/**/*.php'
              - 'src/composer.{json,lock}'
            js:
              - 'src/**/*.{js,ts,vue}'
              - 'src/package*.json'

      - name: Setup PHP
        if: steps.changes.outputs.php == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          coverage: none

      - name: Cache Composer
        if: steps.changes.outputs.php == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-php${{ env.PHP_VERSION }}-

      - name: Setup Node.js
        if: steps.changes.outputs.js == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ "${{ steps.changes.outputs.php }}" = "true" ]; then
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-scripts
          fi
          if [ "${{ steps.changes.outputs.js }}" = "true" ]; then
            npm ci
          fi

      - name: PHP Quality Checks
        if: steps.changes.outputs.php == 'true'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          vendor/bin/pint --test
          vendor/bin/phpstan analyse --memory-limit=2G --no-progress
          vendor/bin/psalm --no-progress

      - name: Frontend Quality Checks
        if: steps.changes.outputs.js == 'true'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run lint
          npm run type-check
  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: lint
    strategy:
      matrix:
        php-version: ['8.3']
        dependency-version: [prefer-stable, prefer-lowest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
          coverage: xdebug
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/vendor
          key: composer-${{ runner.os }}-php${{ matrix.php-version }}-${{ matrix.dependency-version }}-${{ hashFiles('src/composer.lock') }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ "${{ matrix.dependency-version }}" = "prefer-lowest" ]; then
            composer update --no-interaction --prefer-dist --optimize-autoloader --prefer-lowest --prefer-stable
          else
            composer install --no-interaction --prefer-dist --optimize-autoloader
          fi
          npm ci

      - name: Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan ziggy:generate

      - name: Run tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          XDEBUG_MODE: coverage
        run: |
          mkdir -p coverage
          vendor/bin/phpunit --coverage-clover=coverage/clover.xml

      - name: Build assets
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: Frontend tests
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          if [ -f "vitest.config.ts" ]; then
            npx vitest run --coverage
          fi

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.php-version }}-${{ matrix.dependency-version }}
          path: ${{ env.WORKING_DIR }}/coverage/
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    if: github.event_name == 'push' && env.SONAR_TOKEN != ''
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: xdebug
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          npm ci

      - name: Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan ziggy:generate

      - name: Generate coverage
        working-directory: ${{ env.WORKING_DIR }}
        env:
          XDEBUG_MODE: coverage
        run: |
          mkdir -p coverage
          vendor/bin/phpunit --coverage-clover=coverage/clover.xml
          if [ -f "vitest.config.ts" ]; then
            npx vitest run --coverage 2>/dev/null || true
          fi

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ${{ env.WORKING_DIR }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          npm ci

      - name: Security audits
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          composer audit
          npm audit --audit-level=moderate

      - name: Snyk scan
        if: env.SNYK_TOKEN != ''
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: npx snyk test --severity-threshold=medium
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: üì¶ Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          npm ci

      - name: Security Audit (Composer)
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: composer audit

      - name: Security Audit (NPM)
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: npm audit --audit-level=moderate

      - name: Snyk scan
        if: env.SNYK_TOKEN != ''
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: npx snyk test --severity-threshold=medium
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          npm ci

      - name: Setup Laravel
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan ziggy:generate

      - name: Build production assets
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: Build Docker image
        run: |
          docker build \
            --file docker/production/Dockerfile \
            --tag laravel-inertia:latest \
            --tag "laravel-inertia:${{ github.sha }}" \
            .

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint, test, security, deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Pipeline summary
        run: |
          echo "Pipeline Summary:"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Deploy: ${{ needs.deploy.result }}"

      - name: Success notification
        if: needs.deploy.result == 'success' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Deploy completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Failure notification
        if: contains(needs.*.result, 'failure') && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Pipeline failed! Check the logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
