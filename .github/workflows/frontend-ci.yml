# 🎨 Pipeline de Frontend - CI
name: Frontend CI

on:
  push:
    paths:
      - 'src/**/*.{js,ts,vue,jsx,tsx}'
      - 'src/resources/**'
      - 'src/package*.json'
      - 'src/vite.config.ts'
      - 'src/vitest.config.ts'
      - 'src/tsconfig.json'
      - 'src/eslint.config.js'
      - 'src/postcss.config.js'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**/*.{js,ts,vue,jsx,tsx}'
      - 'src/resources/**'
      - 'src/package*.json'
      - 'src/vite.config.ts'
      - 'src/vitest.config.ts'
      - 'src/tsconfig.json'
      - 'src/eslint.config.js'
      - 'src/postcss.config.js'
      - '.github/workflows/frontend-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Definir permissões mínimas necessárias
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  NODE_VERSION: '22'
  WORKING_DIR: src

jobs:
  # Job 1: Linting e Code Quality Frontend
  lint-frontend:
    name: 🎨 Frontend Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Frontend changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            js:
              - 'src/**/*.{js,ts,vue,jsx,tsx}'
            npm:
              - 'src/package*.json'
            config:
              - 'src/vite.config.ts'
              - 'src/vitest.config.ts'
              - 'src/tsconfig.json'
              - 'src/eslint.config.js'
              - 'src/postcss.config.js'

      - name: 🎯 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Cache Node modules
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/node_modules
          key: node-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('src/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-${{ env.NODE_VERSION }}-
            node-${{ runner.os }}-

      - name: 📦 Install Node dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: 🎨 Frontend Linting
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run lint
          npm run type-check

      - name: 🎨 Frontend Formatting Check
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run format:check

  # Job 2: Testes Frontend
  test-frontend:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint-frontend

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: 🧪 Run Frontend tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f "vitest.config.ts" ]; then
            npx vitest run --coverage
          else
            echo "⚠️ No frontend tests configuration found"
          fi

      - name: 🏗️ Build assets
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: 📤 Upload Frontend Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/coverage/
          retention-days: 30
          if-no-files-found: warn

  # Job 3: Análise de Segurança Frontend
  security-frontend:
    name: 🛡️ Frontend Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test-frontend

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: 🛡️ Security Audit (NPM)
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        run: |
          echo "🔍 Running NPM security audit..."
          if npm audit --audit-level=moderate; then
            echo "✅ No moderate+ security vulnerabilities found in Node.js dependencies"
          else
            echo "⚠️ Security vulnerabilities detected - please review and update dependencies"
            echo "💡 Run 'npm audit fix' to automatically fix issues"
          fi

  # Job 4: Relatório Final Frontend
  frontend-report:
    name: 📊 Frontend Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint-frontend, test-frontend, security-frontend]
    if: always()

    steps:
      - name: 📋 Frontend Pipeline Summary
        run: |
          echo "📋 Frontend Pipeline Summary:"
          echo "- Lint: ${{ needs.lint-frontend.result }}"
          echo "- Test: ${{ needs.test-frontend.result }}"
          echo "- Security: ${{ needs.security-frontend.result }}"
          
          if [[ "${{ needs.lint-frontend.result }}" == "success" && 
                "${{ needs.test-frontend.result }}" == "success" && 
                "${{ needs.security-frontend.result }}" == "success" ]]; then
            echo "✅ Frontend pipeline passou em todos os testes!"
            exit 0
          else
            echo "❌ Frontend pipeline teve falhas!"
            exit 1
          fi
